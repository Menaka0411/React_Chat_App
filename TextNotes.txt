import React, { useEffect, useRef, useState } from "react";
import { AiOutlineSend } from "react-icons/ai";
import { FiSearch, FiPhoneCall } from "react-icons/fi";
import { BsThreeDotsVertical } from "react-icons/bs";
import axios from "axios";
import { useUser } from "../utils/UserContext";
import io from "socket.io-client";

const socket = io("http://localhost:3001", {
  transports: ["websocket"]
});

export default function ChatArea({ selectedContact }) {
  const [messages, setMessages] = useState([]);
  const [newMsg, setNewMsg] = useState("");
  const scrollRef = useRef(null);
  const { userId } = useUser();

  useEffect(() => {
    const handleReceiveMessage = (data) => {
      const isRelevant = 
        (data.senderId === userId && data.receiverId === selectedContact?.userId) ||
        (data.receiverId === userId && data.senderId === selectedContact?.userId);
  
      if (isRelevant) {
        setMessages((prevMessages) => [...prevMessages, data]);
      }
    };
  
    socket.on("receive-message", handleReceiveMessage);
  
    return () => {
      socket.off("receive-message", handleReceiveMessage);
    };
  }, [userId, selectedContact?.userId]);
  
  useEffect(() => {
    if (userId) {
      socket.emit("register-user", userId);
    }
  }, [userId]);
  
  useEffect(() => {
    if (selectedContact) {  
      const fetchMessages = async () => {
        try {
          const { data: matchedUser } = await axios.post("http://localhost:3001/api/users/find-by-contact", {
            phone: selectedContact.phone,
            email: selectedContact.email
          });
  
          if (!matchedUser) {
            console.warn("User not found for contact");
            return;
          }
          const realUserId = matchedUser._id;
            const res = await axios.get(`http://localhost:3001/messages/${userId}/${realUserId}`);
          setMessages(res.data || []);
        } catch (error) {
          console.error(error);
        }
      };
  
      fetchMessages();
    }
  }, [selectedContact, userId]);
  
  useEffect(() => {
    scrollRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const getDateLabel = (dateStr) => {
    const today = new Date();
    const msgDate = new Date(dateStr);
    const diff = Math.floor((today - msgDate) / (1000 * 60 * 60 * 24));

    if (diff === 0) return "Today";
    if (diff === 1) return "Yesterday";

    return msgDate.toLocaleDateString(undefined, {
      month: "long",
      day: "numeric",
      year: "numeric",
    });
  };

  const groupedMessages = messages.reduce((acc, msg) => {
    const dateLabel = getDateLabel(msg.timestamp);
    if (!acc[dateLabel]) acc[dateLabel] = [];
    acc[dateLabel].push(msg);
    return acc;
  }, {});

  const handleSend = async () => {
    if (!newMsg.trim()) return;
  
    try {
      const { data: matchedUser } = await axios.post("http://localhost:3001/api/users/find-by-contact", {
        phone: selectedContact.phone,
        email: selectedContact.email
      });
      if (!matchedUser) {
        console.warn("User not found for contact");
        return;
      }
      
      const receiverId = matchedUser._id; 
  
      const msgObj = {
        senderId: userId,
        receiverId,
        text: newMsg,
        timestamp: new Date().toISOString(),
      };
  
      const { data: savedMsg } = await axios.post("http://localhost:3001/messages", msgObj);
      socket.emit("send-message", savedMsg);
      setMessages((prevMessages) => [...prevMessages, savedMsg]);
      setNewMsg("");
    } catch (err) {
      console.error("Error sending message:", err);
    }
  };
  

  const handleKeyDown = (e) => {
    if (e.key === "Enter") handleSend();
  };

  if (!selectedContact) {
    return (
      <div className="flex-1 h-full bg-white flex items-center justify-center">
        <p className="text-gray-400 text-lg">Select a contact to start chatting ðŸ’¬</p>
      </div>
    );
  }

  return (
    <div className="flex-1 flex flex-col h-full bg-white">
      {/* Header */}
      <div className="flex justify-between items-center p-4 border-b bg-gray-50">
        <div className="flex items-center space-x-3">
          <img
            src={
              selectedContact.userProfile
                ? `http://localhost:3001/${selectedContact.userProfile}`
                : "https://images.icon-icons.com/1378/PNG/512/avatardefault_92824.png"
            }
            className="rounded-full w-10 h-10 object-cover"
            alt="Contact"
          />
          <div>
            <p className="font-semibold text-gray-800">{selectedContact.name}</p>
            <p className="text-xs text-green-600">Online</p>
          </div>
        </div>
        <div className="flex items-center space-x-4 text-purple-600 text-xl">
          <FiSearch className="cursor-pointer" />
          <FiPhoneCall className="cursor-pointer" />
          <BsThreeDotsVertical className="cursor-pointer" />
        </div>
      </div>

      {/* Chat Body */}
      <div className="flex-1 overflow-y-auto p-4 space-y-6">
        {Object.entries(groupedMessages).map(([dateLabel, msgs]) => (
          <div key={dateLabel}>
            <div className="text-center text-gray-500 text-sm mb-3">
              <span className="bg-gray-100 px-3 py-1 rounded-full">{dateLabel}</span>
            </div>
            {msgs.map((msg, i) => {
            const isSentByMe = msg.senderId === userId;
            return (
              <div key={i} className={`flex ${isSentByMe ? "justify-end" : "justify-start"} mb-2`}>
                <div className="relative max-w-[75%]">
                  <div
                    className={`px-4 py-2 rounded-2xl flex flex-col ${
                      isSentByMe ? "bg-purple-300 text-black rounded-br-none" : "bg-gray-200 text-gray-800 rounded-bl-none"
                    }`}
                  >
                    <p className="break-words leading-relaxed">{msg.text}</p>
                    <div className={`text-xs mt-1 ${isSentByMe ? "text-black self-end" : "text-gray-800 self-start"}`}>
                      {new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                    </div>
                  </div>
                </div>
              </div>
            );
          })}
          </div>
        ))}
        <div ref={scrollRef} />
      </div>

      {/* Input Area */}
      <div className="flex items-center justify-between p-4 border-t">
        <input
          type="text"
          value={newMsg}
          onChange={(e) => setNewMsg(e.target.value)}
          onKeyDown={handleKeyDown}
          className="w-full px-4 py-2 border rounded-xl text-sm focus:outline-none focus:ring-2 focus:ring-purple-400"
          placeholder="Type your message..."
        />
        <button
          onClick={handleSend}
          className="ml-3 p-2 text-purple-600"
        >
          <AiOutlineSend size={30} />
        </button>
      </div>

    </div>
  );
}


************************************************************

import React, { useEffect, useState } from "react"; 
import axios from "axios";

export default function Sidebar({
  isSidemenuExpanded,
  fullname,
  profileImage,
  contacts,
  onSelectContact,
  setContacts,
}) {
  const [searchTerm, setSearchTerm] = useState("");
  const [isFocused, setIsFocused] = useState(false);

  const userId = localStorage.getItem("userId");

  useEffect(() => {
    const fetchContactsAndTimestamps = async () => {
      try {
        const { data: contactsList } = await axios.get(`http://localhost:3001/contacts/${userId}`);

        const updatedContacts = await Promise.all(
          contactsList.map(async (contact) => {
            try {
              // Find original user id
              const { data: foundUser } = await axios.post(`http://localhost:3001/api/auth/find-by-contact`, {
                phone: contact.phone,
                email: contact.email,
              });

              if (!foundUser || !foundUser._id) {
                console.warn("User not found for contact:", contact.name);
                return { ...contact };
              }

              // Fetch messages between me and that user
              const { data: messages } = await axios.get(
                `http://localhost:3001/api/messages/${userId}/${foundUser._id}`
              );

              // Get the last message timestamp
              const lastMessage = messages.length > 0 ? messages[messages.length - 1] : null;

              return {
                ...contact,
                lastTimestamp: lastMessage ? lastMessage.timestamp : null,
              };
            } catch (innerErr) {
              console.error("Error fetching user/messages for contact:", contact.name, innerErr);
              return { ...contact };
            }
          })
        );

        setContacts(updatedContacts);
      } catch (err) {
        console.error("Error fetching contacts:", err);
      }
    };

    fetchContactsAndTimestamps();
  }, [userId, setContacts]);

  const filteredContacts = (contacts || []).filter((contact) =>
    contact.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const formatTimestamp = (timestamp) => {
    if (!timestamp) return "";
    const date = new Date(timestamp);
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  return (
    <div className="flex h-full">
      <div
        className={`w-72 bg-white flex flex-col border-r border-gray-200 p-4 ${
          isSidemenuExpanded ? "opacity-50" : ""
        }`}
      >
        {/* Profile Info */}
        <div className="flex items-center space-x-3 mb-4">
          <img
            src={
              profileImage
                ? `http://localhost:3001/${profileImage}`
                : "https://images.icon-icons.com/1378/PNG/512/avatardefault_92824.png"
            }
            alt="User Avatar"
            className="rounded-full w-10 h-10 object-cover"
          />
          <div>
            <p className="font-semibold text-gray-700">{fullname || "Fullname"}</p>
            <p className="text-xs text-green-600">Online</p>
          </div>
        </div>

        <hr className="border-t border-gray-300 mb-3" />

        {/* Search Bar */}
        <div className="relative">
          <input
            type="text"
            placeholder="Search contacts"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            onFocus={() => setIsFocused(true)}
            onBlur={() => setTimeout(() => setIsFocused(false), 150)}
            className="w-full mb-2 px-3 py-2 border rounded-xl text-sm focus:outline-none focus:ring-2 focus:ring-purple-400"
          />
          {isFocused && searchTerm && (
            <div className="absolute z-10 left-0 right-0 bg-white border rounded-xl shadow-lg mt-1 max-h-60 overflow-y-auto">
              {filteredContacts.length > 0 ? (
                filteredContacts.map((contact) => (
                  <div
                    key={contact._id || contact.name}
                    onClick={() => {
                      onSelectContact(contact);
                      setSearchTerm("");
                    }}
                    className="flex items-center px-4 py-2 hover:bg-purple-50 cursor-pointer"
                  >
                    <img
                      src={
                        contact.userProfile
                          ? `http://localhost:3001/${contact.userProfile}`
                          : "https://images.icon-icons.com/1378/PNG/512/avatardefault_92824.png"
                      }
                      alt="Contact Avatar"
                      className="rounded-full w-8 h-8 object-cover mr-3"
                    />
                    <p>{contact.name}</p>
                  </div>
                ))
              ) : (
                <div className="px-4 py-2 text-gray-500">No contacts found</div>
              )}
            </div>
          )}
        </div>

        {/* Contacts List */}
        <p className="text-sm font-semibold text-gray-600 mt-4 mb-2">Recent Chats</p>

        <div className="space-y-1 overflow-y-auto flex-1">
          {(contacts || []).map((contact) => (
            <div
              key={contact._id || contact.name}
              onClick={() => onSelectContact(contact)}
              className="flex justify-between items-center p-2 rounded-lg hover:bg-purple-50 cursor-pointer"
            >
              <div className="flex items-center">
                <img
                  src={
                    contact.userProfile
                      ? `http://localhost:3001/${contact.userProfile}`
                      : "https://images.icon-icons.com/1378/PNG/512/avatardefault_92824.png"
                  }
                  alt="Contact Avatar"
                  className="rounded-full w-10 h-10 object-cover mr-3"
                />
                <div>
                  <p className="font-medium text-gray-800">{contact.name}</p>
                  {/* Show last timestamp */}
                  <p className="text-xs text-gray-500">{formatTimestamp(contact.lastTimestamp)}</p>
                </div>
              </div>
            </div>
          ))}
        </div>

      </div>
    </div>
  );
}

**************************************************************************

const express = require('express');
const router = express.Router();
const Message = require('../models/message'); 
const mongoose = require('mongoose');

router.get('/:senderId/:receiverId', async (req, res) => {
  try {
    const { senderId, receiverId } = req.params;
    const messages = await Message.find({
      $or: [
        { senderId: new mongoose.Types.ObjectId(senderId), receiverId: new mongoose.Types.ObjectId(receiverId) },
        { senderId: new mongoose.Types.ObjectId(receiverId), receiverId: new mongoose.Types.ObjectId(senderId) },
      ]
    }).sort({ timestamp: 1 });

    res.json(messages.map(msg => ({
      ...msg._doc,
      senderId: msg.senderId.toString(),
      receiverId: msg.receiverId.toString(),
    })));
    
  } catch (err) {
    console.error(err);
    res.status(500).send('Server Error');
  }
});

router.post('/', async (req, res) => {
  try {
    const { senderId, receiverId, text, timestamp } = req.body;
    const newMessage = new Message({
      senderId,
      receiverId,
      text,
      timestamp,
    });
    await newMessage.save();
    res.json(newMessage);
  } catch (err) {
    console.error(err);
    res.status(500).send('Server Error');
  }
});



module.exports = router;


******************************************************************************


import React, { useState } from "react";
import { GrNext } from "react-icons/gr";
import { Switch } from "@headlessui/react"; 

const Settings = () => {
  const [selectedOption, setSelectedOption] = useState("");
  const [selectedProtectiveOption, setSelectedProtectiveOption] = useState("");

  // Toggle switches
  const [emailNotif, setEmailNotif] = useState(false);
  const [smsNotif, setSmsNotif] = useState(false);

  const handleOptionClick = (option) => {
    setSelectedOption(option);
    setSelectedProtectiveOption(""); 
  };

  const handleBackToSettings = () => {
    setSelectedOption("");
    setSelectedProtectiveOption("");
  };

  const handleProtectiveSubOptionClick = (subOption) => {
    setSelectedProtectiveOption(subOption);
  };
  const renderBlockedUsersContent = () => {
    const blockedData = {
      "View Blocked": ["user1", "user2"],
      "Blocked Spams": ["spammer1", "spammer2"],
      "Reported Contacts": ["reported1", "reported2"],
    };
  
    const title = selectedProtectiveOption;
    const users = blockedData[title] || [];
  
    return (
      <div className="bg-white dark:bg-gray-800 dark:text-white p-6 rounded-xl shadow space-y-4">
        <h3 className="text-2xl font-semibold">{title}</h3>
        {users.map((user, index) => (
          <div
            key={index}
            className="flex items-center justify-between border dark:border-gray-600 p-3 rounded bg-gray-100 dark:bg-gray-700 mb-2"
          >
            <div className="flex items-center gap-3">
              <img
                src="/path-to-avatar.png"
                alt="profile"
                className="w-8 h-8 rounded-full"
              />
              <span>{user}</span>
            </div>
          </div>
        ))}
      </div>
    );
  };
  
  const renderProtectiveContent = () => {
    switch (selectedProtectiveOption) {
      case "Cyber Safe Mode":
        return (
          <div className="bg-white p-6 rounded shadow space-y-4">
            <h3 className="text-xl font-semibold mb-4">Cyber Safe Mode</h3>
            <p>
              Enable Cyber Safe Mode to auto-filter bullying, sensitive content, and inappropriate messages.
            </p>
            <div className="flex items-center gap-4">
              <span>Enable Safe Browsing</span>
              <Switch
                checked={emailNotif}
                onChange={setEmailNotif}
                className={`${emailNotif ? "bg-green-500" : "bg-gray-300"} relative inline-flex items-center h-6 rounded-full w-11 transition-colors`}
              >
                <span
                  className={`${emailNotif ? "translate-x-6" : "translate-x-1"} inline-block w-4 h-4 transform bg-white rounded-full transition-transform`}
                />
              </Switch>
            </div>
            <ul className="list-disc pl-6 text-gray-700 text-sm">
              <li>Auto-block bullying or harassing users</li>
              <li>Hide sensitive images or videos</li>
              <li>Flag and report abusive content</li>
            </ul>
          </div>
        );

      case "Access Control":
        return (
          <div className="bg-white p-6 rounded shadow">
            <h3 className="text-xl font-semibold mb-4">Access Control</h3>
            <p>Manage who can access your content, your login devices, and session history.</p>
            <ul className="list-disc pl-6 text-gray-700 text-sm mt-4 space-y-1">
              <li>View active login sessions and revoke any device</li>
              <li>Control third-party app access to your account</li>
              <li>Manage media and story visibility</li>
            </ul>
            <div className="mt-4 flex items-center gap-4">
              <span>Enable Access Controls</span>
              <Switch
                checked={smsNotif}
                onChange={setSmsNotif}
                className={`${smsNotif ? "bg-green-500" : "bg-gray-300"} relative inline-flex h-6 w-11 items-center rounded-full`}
              >
                <span
                  className={`${smsNotif ? "translate-x-6" : "translate-x-1"} inline-block h-4 w-4 transform bg-white rounded-full transition`}
                />
              </Switch>
            </div>
          </div>
        );

      case "Parental Control":
        return (
          <div className="bg-white p-6 rounded shadow">
            <h3 className="text-xl font-semibold mb-4">Parental Guidance</h3>
            <p>Control your childâ€™s experience and keep them safe while using the app.</p>
            <ul className="list-disc pl-6 text-gray-700 text-sm mt-4 space-y-1">
              <li>Set screen time limits</li>
              <li>Restrict content based on age ratings</li>
              <li>Monitor daily activity and report summary</li>
            </ul>
            <div className="mt-4 flex items-center gap-4">
              <span>Enable Parental Controls</span>
              <Switch
                checked={smsNotif}
                onChange={setSmsNotif}
                className={`${smsNotif ? "bg-green-500" : "bg-gray-300"} relative inline-flex h-6 w-11 items-center rounded-full`}
              >
                <span
                  className={`${smsNotif ? "translate-x-6" : "translate-x-1"} inline-block h-4 w-4 transform bg-white rounded-full transition`}
                />
              </Switch>
            </div>
          </div>
        );

      default:
        return (
          <div className="space-y-4">
            {["Cyber Safe Mode", "Access Control", "Parental Control"].map((sub) => (
              <div
                key={sub}
                onClick={() => handleProtectiveSubOptionClick(sub)}
                className="cursor-pointer p-4 bg-white shadow-sm border border-gray-200 rounded-md hover:bg-purple-50 transition"
              >
                <h3 className="text-lg font-medium text-black">{sub}</h3>
              </div>
            ))}
          </div>
        );
    }
  };

  return (
    <div className="w-full h-full">
      <div className="p-4">
        {/* Header with breadcrumb */}
        <h2 className="text-2xl font-semibold mb-2 flex items-center gap-2">
          <span onClick={handleBackToSettings} className="cursor-pointer text-black">
            Settings
          </span>
          {selectedOption && (
            <>
              <GrNext className="text-xl mt-1" />
              <span
                onClick={() => setSelectedProtectiveOption("")}
                className={`text-xl ${selectedProtectiveOption ? "cursor-pointer text-black" : "text-gray-600"}`}
              >
                {selectedOption}
              </span>
            </>
          )}
          {selectedProtectiveOption && (
            <>
              <GrNext className="text-xl mt-1" />
              <span className="text-xl text-gray-600">{selectedProtectiveOption}</span>
            </>
          )}
        </h2>
        <hr className="border-t border-gray-300 mb-4" />

        {/* Main Settings */}
        {!selectedOption && (
          <div className="space-y-4 mt-6">
            {["Account Settings", "Protective Mode", "Blocked Users", "Logout Account"].map((option) => (
              <div
                key={option}
                onClick={() => handleOptionClick(option)}
                className={`cursor-pointer p-4 bg-white shadow-sm border border-gray-200 rounded-md hover:bg-purple-50 transition ${
                  option === "Logout Account" ? "text-red-600" : "text-black"
                }`}
              >
                <h3 className="text-lg font-medium">{option}</h3>
              </div>
            ))}
          </div>
        )}

        {/* Render Sub Contents */}
        {selectedOption === "Protective Mode" && (
          <div className="mt-6">{renderProtectiveContent()}</div>
        )}

        {selectedOption === "Blocked Users" && selectedProtectiveOption && (
          <div className="mt-6">{renderBlockedUsersContent()}</div>
        )}

          {selectedOption === "Blocked Users" && !selectedProtectiveOption && (
            <div className="space-y-4 mt-6">
              {["View Blocked", "Blocked Spams", "Reported Contacts"].map((sub) => (
                <div
                  key={sub}
                  onClick={() => handleProtectiveSubOptionClick(sub)}
                  className="cursor-pointer p-4 bg-white shadow-sm border border-gray-200 
                  rounded-md hover:bg-purple-50 transition text-black"
                >
                  <h3 className="text-lg font-medium">{sub}</h3>
                </div>
              ))}
            </div>
          )}

      </div>
    </div>
  );
};

export default Settings;
