import React, { useState } from "react";
import { FaBars } from "react-icons/fa";
import SideMenu from "./SideMenu"; 
import { useTheme } from "../context/ThemeContext";
import { getLoggedInUserId } from '../utils/auth';

const Sidebar = ({ setSelectedChat, setActivePanel }) => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const { darkMode } = useTheme();
  const userId = getLoggedInUserId();

  const contacts = [
    { id: 1, name: "Vaish", avatar: "https://cdn-icons-png.flaticon.com/512/149/149071.png", lastMessage: "Hello!" },
    { id: 2, name: "Divi", avatar: "https://cdn-icons-png.flaticon.com/512/149/149071.png", lastMessage: "See you soon!" },
    { id: 3, name: "Pavi", avatar: "https://cdn-icons-png.flaticon.com/512/149/149071.png", lastMessage: "How are you?" },
  ];

  const filteredContacts = contacts
  .filter(contact => contact.id !== userId) // assuming IDs match type
  .filter(contact =>
    contact.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <>
      <div className={`w-1/4 border-r shadow-sm flex flex-col h-full transition-colors duration-300 
            ${darkMode ? "bg-gray-800 text-white" : "bg-white text-black"}`}>
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b">
          <h2 className="text-lg font-semibold">Chats</h2>
          <FaBars
            className="text-xl cursor-pointer"
            onClick={() => setIsMenuOpen(true)}
          />
        </div>

        {/* Search Bar */}
        <div className="p-3">
          <input
            type="text"
            className={`w-full p-2 border rounded-lg 
              ${darkMode ? "bg-gray-700 text-white border-gray-600" : "bg-white text-black"}`}
            placeholder="Search..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>

        {/* Contact List */}
        <div className="flex-1 overflow-y-auto">
          {filteredContacts.length > 0 ? (
            filteredContacts.map((contact) => (
              <div
                key={contact.id}
                className={`flex items-center gap-3 p-3 cursor-pointer transition-colors duration-200
                  ${darkMode ? "hover:bg-gray-700" : "hover:bg-gray-200"}`}
                onClick={() => {
                  setSelectedChat(contact);
                  setActivePanel(null);
                }}
              >
                <img src={contact.avatar} alt="avatar" className="w-10 h-10 rounded-full" />
                <div>
                  <h3 className="font-medium">{contact.name}</h3>
                  <p className={`text-sm ${darkMode ? "text-gray-300" : "text-gray-500"}`}>
                    {contact.lastMessage}
                  </p>
                </div>
              </div>
            ))
          ) : (
            <div className="p-3 text-center text-sm text-gray-400">
              No contacts found
            </div>
          )}
        </div>
      </div>

      {/* Side Menu Drawer */}
      {isMenuOpen && (
        <SideMenu
          onClose={() => setIsMenuOpen(false)}
          setActivePanel={setActivePanel}
        />
      )}
    </>
  );
};

export default Sidebar;

import React, { useState, useEffect, useRef } from "react";
import { IoIosArrowDropdown } from "react-icons/io";
import { FiSearch, FiPhone, FiMoreVertical } from "react-icons/fi";
import { IoMdSend } from "react-icons/io";
import { useTheme } from "../context/ThemeContext";
import { io } from "socket.io-client";

const socket = io("http://localhost:3001");

export default function ChatArea({ currentUser, selectedChat }) {
  const { darkMode } = useTheme();
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [dropdownIndex, setDropdownIndex] = useState(null);
  const [showDeletePopup, setShowDeletePopup] = useState(false);
  const [deleteIndex, setDeleteIndex] = useState(null);
  const [deleteOption, setDeleteOption] = useState("me");

  const messagesEndRef = useRef(null);
  const dropdownRef = useRef(null);
  const room = [currentUser, selectedChat].sort().join("_");

  useEffect(() => {
    socket.emit("join_room", room);
    socket.on("load_history", (history) => {
      setMessages(history);
    });
    return () => socket.off("load_history");
  }, [room]);

  useEffect(() => {
    socket.on("receive_message", (msg) => {
      setMessages(prev => [...prev, msg]);
    });
    return () => socket.off("receive_message");
  }, []);  

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const sendMessage = () => {
    if (input.trim() === "") return;
  
    const newMsg = {
      senderId: currentUser,
      receiverId: selectedChat,
      text: input,
      timestamp: new Date().toISOString(),
    };
  
    socket.emit("send_message", { room, message: newMsg });
    setInput("");  
  };
  

  const toggleDropdown = (index) => {
    setDropdownIndex(dropdownIndex === index ? null : index);
  };

  const handleDeleteClick = (index) => {
    setDeleteIndex(index);
    setShowDeletePopup(true);
    setDropdownIndex(null);
  };

  const confirmDelete = () => {
    const updated = [...messages];
    const msg = updated[deleteIndex];

    if (deleteOption === 'me') {
      updated.splice(deleteIndex, 1);
    } else {
      updated[deleteIndex] = {
        ...msg,
        text: msg.senderId === currentUser ? '[You deleted something]' : '[The user has deleted something]',
        deleted: true,
      };
    }

    setMessages(updated);
    setShowDeletePopup(false);
    setDeleteIndex(null);
  };
  
  return (
    <div className={`flex flex-col h-full relative transition-colors duration-300 ${darkMode ? 'bg-gray-900 text-white' : 'bg-white text-black'}`}>
      <div className={`flex items-center justify-between p-3 border-b shadow-sm z-10 ${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>
         <div className="flex items-center gap-3">
            <img
              src={`http://localhost:3001${selectedChat?.image || '/default.jpg'}`}
              alt="avatar"
              className="w-10 h-10 rounded-full object-cover"
            />
            <h2 className="font-semibold">{selectedChat?.name}</h2>
          </div>

        <div className="flex gap-3 text-xl text-gray-500">
          <FiPhone />
          <FiSearch />
          <FiMoreVertical />
        </div>
      </div>

      {/* Messages */}
      <div className={`flex-1 overflow-y-auto p-4 space-y-4 ${darkMode ? 'bg-gray-900' : 'bg-gray-100'}`}>
        {messages.map((msg, i) => (
          <div key={i} className={`relative flex items-end mb-2 ${msg.senderId === currentUser ? 'justify-end' : 'justify-start'}`}>
            <div className={`max-w-xs px-4 py-2 rounded-lg text-sm ${msg.deleted ? 'italic text-gray-400' : ''} 
              ${msg.senderId === currentUser
                ? 'bg-blue-500 text-white'
                : darkMode
                  ? 'bg-gray-700 text-white'
                  : 'bg-white text-black border border-gray-300'
              }`}>
              {msg.text}
            </div>
            <button onClick={() => toggleDropdown(i)} className="ml-2 text-gray-500">
              <IoIosArrowDropdown />
            </button>

            {dropdownIndex === i && (
              <div ref={dropdownRef} className={`absolute ${msg.senderId === currentUser ? 'right-10' : 'left-10'} top-full mt-2 bg-white shadow-lg rounded-lg border border-gray-300 w-40 z-20`}>
                <ul>
                  {["Copy", "Select", "Forward", "Delete"].map((option, idx) => (
                    <li
                      key={idx}
                      onClick={() => option === 'Delete' && handleDeleteClick(i)}
                      className="p-2 text-sm cursor-pointer hover:bg-gray-200"
                    >
                      {option}
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        ))}
        <div ref={messagesEndRef} />
      </div>

      {/* Input */}
      <div className={`p-3 flex items-center gap-2 border-t ${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>
        <input
          type="text"
          className={`flex-1 px-4 py-2 rounded-full border focus:outline-none ${darkMode ? 'bg-gray-700 text-white border-gray-600 placeholder-gray-400' : 'bg-white text-black border-gray-300'}`}
          placeholder="Type a message"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onKeyDown={(e) => {
            if (e.key === "Enter") {
              e.preventDefault();
              sendMessage();
            }
          }}
        />
        <button onClick={sendMessage} className="text-blue-500 text-4xl">
          <IoMdSend />
        </button>
      </div>

      {/* Delete Confirmation */}
      {showDeletePopup && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-30 flex items-center justify-center">
          <div className="bg-white p-6 rounded-lg w-80 text-black">
            <h3 className="text-lg font-semibold mb-4">Are you sure you want to delete?</h3>
            <div className="flex flex-col gap-3">
              <label className="flex items-center gap-2">
                <input
                  type="radio"
                  name="delete"
                  value="me"
                  checked={deleteOption === 'me'}
                  onChange={(e) => setDeleteOption(e.target.value)}
                />
                Delete for me
              </label>
              <label className="flex items-center gap-2">
                <input
                  type="radio"
                  name="delete"
                  value="everyone"
                  checked={deleteOption === 'everyone'}
                  onChange={(e) => setDeleteOption(e.target.value)}
                />
                Delete for everyone
              </label>
            </div>
            <div className="mt-5 flex justify-end gap-3">
              <button onClick={() => setShowDeletePopup(false)} className="px-3 py-1 rounded bg-gray-300 hover:bg-gray-400">
                Cancel
              </button>
              <button onClick={confirmDelete} className="px-3 py-1 rounded bg-red-600 text-white hover:bg-red-700">
                Confirm
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}



*****************************************************
const { Server } = require("socket.io");

let chatHistory = {}; // Temporary in-memory storage

function initSocket(server) {
  const io = new Server(server, {
    cors: {
      origin: "http://localhost:3000", // Change if needed
      methods: ["GET", "POST"],
    },
  });

  io.on("connection", (socket) => {
    console.log("User connected:", socket.id);

    socket.on("join_room", (room) => {
      socket.join(room);
      if (!chatHistory[room]) chatHistory[room] = [];
      socket.emit("load_history", chatHistory[room]);
    });

    socket.on("send_message", ({ room, message }) => {
      chatHistory[room] = [...(chatHistory[room] || []), message];
      io.to(room).emit("receive_message", message);
    });

    socket.on("disconnect", () => {
      console.log("User disconnected:", socket.id);
    });
  });
}

module.exports = initSocket;

**********************************************************

const mongoose = require("mongoose");

const MessageSchema = new mongoose.Schema({
  room: String,
  senderId: String,
  receiverId: String,
  text: String,
  timestamp: { type: Date, default: Date.now },
  deleted: { type: Boolean, default: false }
});

module.exports = mongoose.model("Message", MessageSchema);


const express = require('express');
const router = express.Router();
const Message = require('../models/Message');

// Save a message
router.post('/', async (req, res) => {
  try {
    const newMsg = new Message(req.body);
    const saved = await newMsg.save();
    res.status(200).json(saved);
  } catch (err) {
    res.status(500).json(err);
  }
});

// Get messages between two users
router.get('/:user1/:user2', async (req, res) => {
  try {
    const room1 = [req.params.user1, req.params.user2].sort().join('_');
    const messages = await Message.find({ room: room1 });
    res.status(200).json(messages);
  } catch (err) {
    res.status(500).json(err);
  }
});

// Delete message
router.delete('/:id', async (req, res) => {
  try {
    await Message.findByIdAndDelete(req.params.id);
    res.status(200).json("Deleted");
  } catch (err) {
    res.status(500).json(err);
  }
});

module.exports = router;
